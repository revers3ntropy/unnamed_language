#               GLOBAL DATA                 /#

# Data in figure 2 stored as a list /#
[var|medium_narrow] {8,2650,180,8}   [/medium_narrow]
[var|large_narrow]  {7,5600,220,10}  [/large_narrow]
[var|medium_wide]   {5,4050,406,1}   [/medium_wide]

[var|airport__setap]      null    [/airport__setap] # has airport function been run /#
[var|airport__local]      null    [/airport__local]
[var|airport__foreign]    null    [/airport__foreign]

[var|flight__aircraft]    null    [/flight__aircraft]
[var|flight__first]       null    [/flight__first]
[var|flight__econ]        null    [/flight__econ]
[var|flight__set]         null    [/flight__set]

[func|airport]
    [var|exists] false [/exists] # Have the ap codes been set correctly /#

    [set|airport__setap]
        false
    [/airport__setap]

    [set|airport__local]
        [run|input]
            'Please input the UK starting airport'
        [/input]
    [/airport__local]

    [if|airport__local in {'BOR', 'LPL"}] # Check that local is a valid UK airport code /#
        [set|airport_foreign]
            [run|listen]
                'Please input the destination airport code'
            [/listen]
        [/airport_foreign]

        [var|csv_reader]
            [run|open_csv]
                'Airports.txt'
            [/open_csv]
        [/csv_reader]

        [for|row|csv_reader]
            [var|row_0]
                [run|get_element]
                    {csv_reader, 0}
                [/get_element]
            [/row_0]

            [if|airport__foreign in row_0] # Check to see if the entered foreign airport code is valid /#
                [run|echo]
                    [run|get_element]
                        {row, 1}
                    [\get_element]
                [/echo]
                [set|exists]
                    true
                [/exists]
            [/if]
        [/for]

        [if|exists = true] # Check to see that the airport codes are set correctly /#
            [run|echo]
                'Airport information set'
            [/echo]

            [set|airport__setap]
                true # Allows for later code to check if this function has been run \#
            [/airport__setap]

            [run|menu][/menu]

        [else|true]
            [run|echo]
                'Not a valid forign airport code'
            [/echo]

            [set|airport__foreign]
                {} # Allows for later code to check if this function has been run \#
            [/airport__foreign]

            [run|menu][/menu]
        [/if]

        [var|csv_reader]
            [run|open_csv]
                'Airports.txt'
            [/open_csv]
        [/csv_reader]

        [for|row|csv_reader]
            [var|row_0]
                [run|get_element]
                    {csv_reader, 0}
                [/get_element]
            [/row_0]

            [if|airport__foreign in row_0] # Set the distance between the two airports \#
                [if|airport.local = 'LPL']
                    [set|airport__dist]
                        [run|get_element]
                            {row, 2}
                        [/get_element]
                    [/set]
                [else|airport.local = 'BOR']
                      [set|airport__dist]
                        [run|get_element]
                            {row, 3}
                        [/get_element]
                    [/set]
                [/if]
            [/if]
        [/for]

    [else|true]
        [run|echo]
            'Not a valid UK airport code'
        [/echo]
        [run|menu][/menu]
    [/if]
[/airport]


[func|flight]
    [var|inp]
        [run|listen]
            "Please enter the type of aircraft to be used:\n Medium narrow body (A) \n Large narrow body (B) \n Medium wide body (C) \n Input: ") # Select which aircraft is used \#
        [/listen]
    [/inp]

    [set|inp]
        [run|lower]
            inp
        [/lower]
    [/inp]

    [if|inp in {'a', 'medium narrow body', 'medium narrow'}] # Check which aircraft and then print that info \#
        [set|flight__aircraft]
            med_nrro
        [/flight__aircraft]
        [run|echo]
            f"\n  £{med_nrro[0]} per 100 km \n {med_nrro[1]} maximum flight range \n {med_nrro[2]} maximum economy capacity \n {med_nrro[3]} minimum first class seats")
        [/echo]

    [else|inp in {'b', 'large narrow body', 'large narrow'}]
        [set|flight__aircraft]
            lrg_nrro
        [/flight__aircraft]

        [run|echo]
            [run|concatenate]
                {'£', lrg_nrro[0], 'per 100 km', lrg_nrro[1], 'maximum flight range 'lrg_nrro[2] maximum economy capacity', lrg_nrro[3], minimum first class seats'}
            [/concatenate]
        [/echo]

    [else|inp in {'c', 'medium wide', 'medium wide body'}]
        [set|flight__aircraft]
            med_wide
        [/flight__aircraft]
        [run|echo]
            [run|concatenate]
                {'£', med_wide[0], 'per 100 km', med_wide[1], 'maximum flight range', med_wide[2], 'maximum economy capacity', med_wide[3], 'minimum first class seats'}
            [/concatenate]
        [/echo]

    [else|true]
        [run|echo|
            'Input error'
        [/echo
        [run|menu]
    [/if]

  flight.first = int(input("Please enter the number of first class seats: ")) ##Number of first class seats

  if flight.first != 0: ##First class seats section
    if flight.first < flight.aircraft[3]: ##Check that its above the minimum no of first class
      print("Input error: less than minimum # of seats")
      menu()
    elif flight.first > (flight.aircraft[2]/2):
      print("Not enough space for that number of first class seats!")
      menu()

  flight.econ = flight.aircraft[2] - flight.first*2 ##Calculate and save number of Economy seats
  print("First class:", flight.first)
  print("Economy:", flight.econ)
  flight.set = True
  menu()


def price():
  if airport.setap == False: ##Check Airport Details are set
    print("Airports not set")
    menu()
  elif flight.set == False:
    print("Flight information not entered")
    menu()

  if flight.aircraft[1] < airport.dist: ##Check that the aircraft can make the flight
    print("The distance between the airports is too great for this aircraft to handle")
    menu()

  price.econp = int(input("Price of an economy ticket: "))
  price.firstp = int(input("Price of a first class ticket: "))

  ## Calculate all of the costs
  price.seatcost = flight.aircraft[0] * airport.dist/100
  price.flcost = price.seatcost * (flight.first + flight.econ)
  price.income = (flight.first * price.firstp) + (flight.econ * price.econp)
  price.profit = price.income - price.flcost

  ## Print results
  print("Cost per seat:", price.seatcost)
  print("Flight cost: ",price.flcost)
  print("Flight income:", price.income)
  print("Flight profit:",price.profit)
  print()
  menu()


def clear():
  ## No point in clearing all of the variables when you can instead just tell the program that nothing has been set
  airport.setap = False
  flight.set = False
  print("Data cleared")
  menu()


def quit():
  print("Exiting program, thank you.")
  exit()


def menu():
  print("\n Main Menu")
  inp = str(input("Please choose an option: \n Enter Airport Details (A) \n Enter flight details (B) \n Enter price plan and calculate profit (C) \n Clear data (D) \n Quit (E) \n Input: ")) ##Input selection

  if inp.lower() in ("enter airport Details", "airport Details", "a"):
    airport()
  elif inp.lower() in ("enter flight details", "flight details", "b"):
    flight()
  elif inp.lower() in ("enter price plan and calculate profit", "price plan", "c"):
    price()
  elif inp.lower() in ("d", "clear", "clear data"):
    clear()
  elif inp.lower() in ("quit", "e"):
    quit()
  else:
    print("Invalid input")
    menu()

menu() ##Begin program by opening menu - the rest of the code will remain inside functions so no need for a loop